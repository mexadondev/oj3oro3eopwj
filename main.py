import datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import F
from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.markdown import hlink

from loader import dp, db, bot, admin, lock
import asyncio
from keybords import *
from func import *
from config import *
from States import *
import pytz
from datetime import datetime, timedelta
import datetime as dt
from middleware import *

admin.message.filter(IsAdmin())


@dp.message(CommandStart())
async def cmd_start(message:Message, state:FSMContext):
    db.db_start()
    db.db_settings()
    db.db_stats()
    db.db_urls()


    word = random.choice(list(captcha_dict))
    if not db.user_exists(message.from_user.id):
        start_cmd = message.text
        referi_id = str(start_cmd[7:])
        if str(referi_id) != '':
            if str(referi_id) != str(message.from_user.id):
                db.add_users(message.from_user.id, referi_id)
                await message.answer(
                    f'üëãüèª –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç ü§ñ - –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É\n\n'
                    f'–ù–∞–∂–º–∏ –Ω–∞ üëâ <b>{word}</b>', reply_markup=await captcha_keybord(word))
                try:
                    await bot.send_message(referi_id,
                                           f'<b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id <code>{message.from_user.id}</code> @{message.from_user.username}</b>')

                except:
                    pass
            else:
                db.add_users(message.from_user.id)
                await bot.send_message(message.from_user.id, "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ")
        else:
            db.add_users(message.from_user.id)
            await message.answer(
                f'üëãüèª –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç ü§ñ - –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É\n\n'
                f'–ù–∞–∂–º–∏ –Ω–∞ üëâ <b>{word}</b>', reply_markup=await captcha_keybord(word))
        await state.set_state(Captcha_users.status)
        return

    await message.answer(
        f'üëãüèª –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç ü§ñ - –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É\n\n'
        f'–ù–∞–∂–º–∏ –Ω–∞ üëâ <b>{word}</b>', reply_markup=await captcha_keybord(word))
    await state.set_state(Captcha_users.status)


@dp.callback_query(F.data.startswith('Captcha'), Captcha_users.status)
async def chek_captcha(callback: CallbackQuery, state: FSMContext):
    keys = callback.data.split('|')[1]
    word = callback.data.split('|')[2]
    users_link = hlink(callback.from_user.full_name, callback.from_user.url)
    game_link = hlink(NAME_CASINO, db.get_URL().get('channals'))
    word_new = random.choice(list(captcha_dict))
    if keys == word:
        await callback.message.delete()
        await callback.message.answer(f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {users_link} –≤ {game_link} üé≤</b>',
                                      reply_markup=kb_menu(callback.from_user.id), disable_web_page_preview=True)
        await state.clear()

    else:
        await callback.answer('‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!', show_alert=True)
        await callback.message.edit_text(text=
            f'üëãüèª –ü—Ä–∏–≤–µ—Ç {callback.from_user.first_name}, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç ü§ñ - –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É\n\n'
            f'–ù–∞–∂–º–∏ –Ω–∞ üëâ <b>{word_new}</b>', reply_markup=await captcha_keybord(word_new))


@dp.message(F.text == 'üìé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
async def stats_adm(message: Message):
    await message.answer(f'<b>üìé –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                         f'https://t.me/{NICNAME}?start={message.from_user.id}\n\n'
                         f'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{db.count_ref(message.from_user.id)}</code>\n'
                         f'üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{db.refka_cheks_money(message.from_user.id)}</code>$\n\n'
                         f'‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n'
                         f'–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å {lose_withdraw}% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n'
                         f'–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot\n\n'
                         f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å: {min_stavka_referal}$</b>',
                         reply_markup=kb_url_Channel())


@dp.message(F.text == 'üí≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info_func(message:Message):
    await message.answer(f'<b>üí≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ {hlink(title=NAME_CASINO, url=db.get_URL().get("channals"))}</b>', reply_markup=kb_info(), disable_web_page_preview=True)



@admin.message(F.text == 'üëë –ê–¥–º–∏–Ω–∫–∞')
async def stats_adm(message: Message):
    balance = await crypto.get_balance()
    balance = balance[0].available
    await message.answer(text='<b>–í—ã –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é\n'
                                          f'–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: <code>{round(float(balance), 2)}$</code></b>',
                                     reply_markup=kb_admin())


@admin.callback_query(F.data == 'back_admin')
async def stats_adm(callback: CallbackQuery, state:FSMContext):
    await state.clear()
    balance = await crypto.get_balance()
    balance = balance[0].available
    await callback.message.edit_text(text='<b>–í—ã –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é\n'
                                          f'–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: <code>{round(float(balance), 2)}$</code></b>', reply_markup=kb_admin())


@admin.callback_query(F.data == 'stats_project')
async def stats_adm(callback: CallbackQuery):
    stats = db.all_stats()
    balance = await crypto.get_balance()
    balance = balance[0].available
    info_day = db.all_stats_day()
    procent_all = 0.0
    update_balance_all = 0.0
    try:
        procent_all = float(stats[1]) / float(stats[0]) * 100
        update_balance_all = float(stats[4]) - float(stats[3])
    except Exception:
        pass
    procent_day = 0.0
    update_balance_day = 0.0
    try:

        procent_day = float(info_day[1]) / float(info_day[0]) * 100
        update_balance_day = float(info_day[4]) - float(info_day[3])
    except Exception:
        pass

    await callback.message.edit_text(text=f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–∞–∑–∏–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</b>\n'
                         f'<b>‚î† –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤:</b> <code>{stats[5]} —à—Ç</code>\n'
                         f'<b>‚î† –í—Å–µ–≥–æ –∏–≥—Ä:</b> <code>{stats[0]} —à—Ç</code>\n'
                         f'<b>‚î† –ü–æ–±–µ–¥:</b> <code>{stats[1]} —à—Ç</code>\n'
                         f'<b>‚î† –ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> <code>{stats[2]} —à—Ç</code>\n'
                         f'<b>‚î† –í—ã–ø–ª–∞—á–µ–Ω–æ:</b> <code>{round(float(stats[3]), 2)}$</code>\n'
                         f'<b>‚î† –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ:</b> <code>{round(float(stats[4]), 2)}$</code>\n'
                         f'<b>‚î† –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b> <code>{round(float(update_balance_all), 2)}$</code>\n'
                         f'<b>‚î† –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b> <code>{int(procent_all)}%</code>\n\n\n'
                         f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–∞–∑–∏–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n'
                         f'<b>‚î† –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è:</b> <code>{info_day[0]} —à—Ç</code>\n'
                         f'<b>‚î† –ü–æ–±–µ–¥ —Å–µ–≥–æ–¥–Ω—è:</b> <code>{info_day[1]} —à—Ç</code>\n'
                         f'<b>‚î† –ü–æ—Ä–∞–∂–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:</b> <code>{info_day[2]} —à—Ç</code>\n'
                         f'<b>‚î† –í—ã–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> <code>{round(float(info_day[3]), 2)}$</code>\n'
                         f'<b>‚î† –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> <code>{round(float(info_day[4]), 2)}$</code>\n'
                         f'<b>‚î† –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> <code>{round(float(update_balance_day), 2)}$</code>\n'
                         f'<b>‚î† –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –∑–∞ –¥–µ–Ω—å:</b> <code>{int(procent_day)}%</code>\n\n\n'
                         f'<b>üí∏ –ë–∞–ª–∞–Ω—Å –ö–∞–∑–∏–Ω–æ</b>\n'
                         f'<b>‚îñ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ:</b> <code>{balance}$</code>', reply_markup=kb_back_admin())


@admin.callback_query(F.data == 'send_db')
async def add_card(callback: CallbackQuery):
    document = FSInputFile('database.db')
    await bot.send_document(chat_id=callback.from_user.id, document=document)
    await callback.answer()





@admin.callback_query(F.data == 'stats_user')
async def stats_adm(callback: CallbackQuery, state:FSMContext):
    await callback.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ id –∏–≥—Ä–æ–∫–∞</b>', reply_markup=kb_back_admin())
    await state.set_state(UserStats.user_id)


@admin.message(UserStats.user_id)
async def stats_user(message: Message, state: FSMContext):
    user_id = message.text
    info = db.all_stats_users(user_id)
    sum_profit = 0.0

    try:
        procent = int(info[1]) / int(info[0]) * 100
    except ZeroDivisionError:
        procent = 0

    try:
        sum_profit = round(float(info[4]), 2) - round(float(info[3]), 2)
    except ZeroDivisionError:
        pass
    await message.answer(f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞</b>\n\n'
                         f'<b>‚î† –í—Å–µ–≥–æ –∏–≥—Ä:</b> <code>{info[0]} —à—Ç</code>\n'
                         f'<b>‚î† –ü–æ–±–µ–¥:</b> <code>{info[1]} —à—Ç</code>\n'
                         f'<b>‚î† –ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> <code>{info[2]} —à—Ç</code>\n'
                         f'<b>‚î† –í—ã–ø–ª–∞—á–µ–Ω–æ:</b> <code>{round(float(info[3]), 2)}$</code>\n'
                         f'<b>‚î† –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ:</b> <code>{round(float(info[4]), 2)}$</code>\n'
                         f'<b>‚î† –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ.–ü—Ä–æ–≥—Ä–∞–º–º—ã:</b> <code>{round(float(info[5]), 2)}$</code>\n'
                         f'<b>‚î† –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{db.count_ref(user_id)}</code>\n'
                         f'<b>‚î† –ó–∞—Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∑–∏–Ω–æ:</b> <code>{round(float(sum_profit), 2)}$</code>\n'
                         f'<b>‚îñ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</b> <code>{round(float(procent), 2)}%</code>', reply_markup=kb_back_admin())
    await state.clear()



@admin.callback_query(F.data == 'add_balance')
async def stats_adm(callback: CallbackQuery, state:FSMContext):
    await callback.message.edit_text(text='<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ $</b>', reply_markup=kb_back_admin())
    await state.set_state(AddBalanceCasino.amount)


@admin.message(AddBalanceCasino.amount)
async def add_balance(message: Message, state: FSMContext):
    amount = message.text

    invoce = await crypto.create_invoice(asset='USDT',
                                         amount=float(amount),
                                         description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Casino')
    await message.answer('<b>üîó –î–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É</b>', reply_markup=keybord_add_balance(invoce.bot_invoice_url))
    await state.clear()


@admin.callback_query(F.data == 'settings_fake')
async def fake_game_adm(callback: CallbackQuery):
    values_fake = db.get_fake_values()
    await callback.message.edit_text(text='<b>üëÄ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–µ–π–∫ —Å—Ç–∞–≤–∫–∏:\n'
                         f'–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–≥—Ä: ‚åõÔ∏è <code>{TIMER}</code> —Å–µ–∫.</b>', reply_markup=kb_fake_switch(values_fake))


@admin.callback_query(F.data.startswith('fake'))
async def fake_switch_func(callback:CallbackQuery):
    values_fake = callback.data.split('|')[1]
    if int(values_fake):
        db.update_fake(0)
    if int(values_fake) == 0:
        db.update_fake(1)

    values_fake = db.get_fake_values()
    await callback.message.edit_text(text='<b>üëÄ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–µ–π–∫ —Å—Ç–∞–≤–∫–∏:\n'
                                          f'–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–≥—Ä: ‚åõÔ∏è <code>{TIMER}</code> —Å–µ–∫.</b>',
                                     reply_markup=kb_fake_switch(int(values_fake)))
    await callback.answer()



@admin.callback_query(F.data == 'kef_edit')
async def kef_edit_adm(callback: CallbackQuery):
    all_kef = db.get_all_KEF()
    text = await kef_all_text(all_kef)
    await callback.message.edit_text(text=text, reply_markup=kb_edit_kef(all_kef))



@admin.callback_query(F.data.startswith('new_kef'))
async def new_kef_func(callback:CallbackQuery, state:FSMContext):
    column = callback.data.split('|')[1]
    cur_kef = callback.data.split('|')[2]
    res = await callback.message.edit_text(text=f"<b>–¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: [<code>{cur_kef}</code>]\n\n"
                                                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>", reply_markup=ikb_stop())
    await state.update_data(column=column, message_id=res.message_id)
    await state.set_state(NewKefGame.value)


@admin.message(NewKefGame.value)
async def fsm_new_kef(message:Message, state:FSMContext):
    await message.delete()

    data = await state.get_data()
    db.update_kef(column=data['column'], values=float(message.text))
    all_kef = db.get_all_KEF()
    text = await kef_all_text(all_kef)
    await bot.edit_message_text(chat_id=message.from_user.id, text=text, message_id=data['message_id'], reply_markup=kb_edit_kef(all_kef))
    await state.clear()


@admin.callback_query(F.data == 'knb')
async def knb_settings_func(callback:CallbackQuery):
    cur_procent = db.get_cur_KEF('KNB')
    await callback.message.edit_text(text='<b>‚öôÔ∏è –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –Ω–∞ –∫–∞–º–µ–Ω—å,–Ω–æ–∂–Ω–∏—Ü—ã,–±—É–º–∞–≥–∞ (–±–µ—Ä–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0-100, –µ—Å–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É —Ç–æ —é–∑–µ—Ä –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç)\n\n'
                                          '<code>1</code> - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à\n'
                                          '<code>100</code> - –±–µ–∑ –Ω–∞–∫—Ä—É—Ç–∫–∏</b>', reply_markup=kb_KNB_twist(cur_procent))


@admin.callback_query(F.data.startswith('Twist_knb'))
async def knb_settings_func(callback:CallbackQuery):
    cur_procent = callback.data.split('|')[1]
    new_procent = await procent_knb_twist(int(cur_procent))
    db.update_kef(column='KNB', values=new_procent)
    await callback.message.edit_reply_markup(reply_markup=kb_KNB_twist(new_procent))
    await callback.answer()

@admin.callback_query(F.data == 'all_message_send')
async def all_message_send_func(callback:CallbackQuery):
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ikb_tip_rassilka())



@admin.callback_query(F.data == ('Texts'))
async def tip_text(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>', reply_markup=ikb_stop())
    await state.set_state(AdminText.text)


@admin.message(AdminText.text)
async def rasl_text(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await message.answer(message.html_text, reply_markup=ikb_send_post())
    await state.set_state(AdminText.send)


@admin.callback_query(F.data == ('post_go'), AdminText.send)
async def rasl_text(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data['text']

    user = db.all_user()
    count = 0
    await callback.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞:\n'
                                     f'{text} \n\n'
                                     f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è <code>{len(user)}</code> —á–µ–ª–æ–≤–µ–∫')


    for i in range(len(user)):
        try:
            await bot.send_message(user[i][0], f'{text}', parse_mode='HTML', disable_web_page_preview=True)
            count += 1
            await asyncio.sleep(0.05)
        except Exception:
            continue
    for i in ADMIN:
        await bot.send_message(i, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n'
                                  f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: {count} —á–µ–ª–æ–≤–µ–∫')
    await state.clear()




@admin.callback_query(F.data == ('photo'))
async def tip_text(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('<b>[1] –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>', reply_markup=ikb_stop())
    await state.set_state(AdminPhotoText.text)


@admin.message(AdminPhotoText.text)
async def rasl_text(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await message.answer('<b>[2] –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ</b>', reply_markup=ikb_stop())
    await state.set_state(AdminPhotoText.photo)


@admin.message(F.photo, AdminPhotoText.photo)
async def rasl_text(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[0].file_id)

    data = await state.get_data()
    await bot.send_photo(chat_id=message.chat.id, photo=data['photo'], caption=data['text'],
                         reply_markup=ikb_send_post_photo())

    await state.set_state(AdminPhotoText.send_photo)


@admin.callback_query(F.data == ('post_photo_go'), AdminPhotoText.send_photo)
async def rasl_text_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user = db.all_user()
    count = 0
    await callback.message.edit_caption(caption='–†–∞—Å—Å—ã–ª–∫–∞:\n'
                                                f'{data["text"]} \n\n'
                                                f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è <code>{len(user)}</code> —á–µ–ª–æ–≤–µ–∫')
    try:
        for i in range(len(user)):

            try:
                await bot.send_photo(chat_id=user[i][0], photo=data['photo'], caption=data['text'], parse_mode='HTML')
                count += 1
                await asyncio.sleep(0.05)

            except Exception as e:
                continue
        for i in ADMIN:
            await bot.send_message(chat_id=i, text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n'
                                                   f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: {count} —á–µ–ª–æ–≤–µ–∫')
            await state.clear()
    except Exception as e:
        await state.clear()


@admin.callback_query(F.data == 'urls')
async def urls_func(callback:CallbackQuery):
    url = db.get_URL()
    await callback.message.edit_text(await urls_admin_text(url), reply_markup=kb_urls(), disable_web_page_preview=True)


@admin.callback_query(F.data.startswith('UrlEdit'))
async def new_url_func(callback:CallbackQuery, state:FSMContext):
    column = callback.data.split('|')[1]
    name = callback.data.split('|')[2]
    res = await callback.message.edit_text(text=f'<b>–í—ã–±—Ä–∞–Ω: {name}\n\n'
                                                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:</b>', reply_markup=ikb_stop())
    await state.update_data(message_id=res.message_id, column=column)
    await state.set_state(NewUrlAdmin.url)


@admin.message(NewUrlAdmin.url)
async def new_url_fsm(message:Message, state:FSMContext):
    await message.delete()
    data = await state.get_data()
    db.update_url(column=data.get('column'), values=message.text)
    url = db.get_URL()
    await bot.edit_message_text(chat_id=message.from_user.id, text=await urls_admin_text(url), message_id=data.get('message_id'), disable_web_page_preview=True, reply_markup=kb_urls())
    await state.clear()


@admin.callback_query(F.data == 'deleted_checks')
async def deleted_checks_func(callback:CallbackQuery):
    await callback.message.edit_text(text='<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏?</b>', reply_markup=kb_answer_delete())

@admin.callback_query(F.data == 'YesDel')
async def YesDel_func(callback:CallbackQuery):
    all_cheks = await crypto.get_checks(asset='USDT', status='active')
    try:
        for i in all_cheks:
            await crypto.delete_check(i.check_id)
    except TypeError:
        return await callback.answer('–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–æ–≤ –Ω–µ—Ç', show_alert=True)
    await callback.answer('‚úÖ –ß–µ–∫–∏ —É–¥–∞–ª–µ–Ω—ã', show_alert=True)
    balance = await crypto.get_balance()
    balance = balance[0].available
    await callback.message.edit_text(text='<b>–í—ã –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é\n'
                                          f'–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: <code>{round(float(balance), 2)}$</code></b>',
                                     reply_markup=kb_admin())


@dp.channel_post()
async def start_game_post_func(message: Message):
    text = message.text
    if '–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)' in message.text:
        await message.delete()
        async with lock:
            user_id = message.entities[0].user.id
            username = message.entities[0].user.username
            first_name = message.entities[0].user.first_name
            amount = text.split('($')[1].split(').')[0]
            order = ''.join(random.choice(digits) for i in range(10))

            if '@' in first_name:
                first_name = f'*******'
            if not db.user_exists(user_id):
                db.add_users(user_id)
            exodus = ''
            try:
                exodus = text.split('üí¨')[1].strip().title()
            except IndexError:
                return await not_game_func(amount=float(amount), user_id=user_id, status='Comments', first_name=first_name, order=order, username=username)
            if float(amount) > LIMIT_STAVKA:
                return await not_game_func(amount=float(amount), user_id=user_id, status='LIMIT', first_name=first_name, order=order, username=username)
            if not exodus in all_text:
                return await not_game_func(amount=float(amount), user_id=user_id, status='Command', first_name=first_name,
                                    order=order, username=username)

            await bot.send_message(chat_id=URL_LOG_CHANNAL, text=f"{text}\n\n"
                                                                 f"id: <code>{user_id}</code>\n"
                                                                 f"username: @{username}\n"
                                                                 f"name: {first_name}")
            url = db.get_URL()
            help_stavka = hlink('–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url.get('info_stavka'))
            info_channal = hlink('–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª', url.get('news'))
            url_viplata = hlink('–í—ã–ø–ª–∞—Ç—ã', url.get('transfer'))
            url_referal_programm = hlink(f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ [{lose_withdraw}%]', URL_BOT)
            name_game = await get_name_game(text=exodus)

            res = await bot.send_message(chat_id=channal_id, text=f'<b>ü§µüèª‚Äç‚ôÇÔ∏è –ö—Ä—É–ø—å–µ –ø—Ä–∏–Ω—è–ª –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É.</b>\n\n'
                                                                  f'üë§ –ò–≥—Ä–æ–∫: <b>{first_name}</b>\n'
                                                                  f'üí∏ –°—Ç–∞–≤–∫–∞: <b>{amount}$</b>\n'
                                                                  f'‚òÅÔ∏è –ò—Å—Ö–æ–¥: <b>{exodus}</b>\n'
                                                                  f'üïπ –ò–≥—Ä–∞: <b>({name_game})</b>\n\n'
                                                                  f'<b>{help_stavka} | {info_channal} | {url_viplata}\n'
                                                                  f'[ {url_referal_programm} ]</b>',
                                         reply_markup=send_stavka(), disable_web_page_preview=True)

            echange = await crypto.get_exchange_rates()
            rubs_price = echange[0].rate
            KEF = db.get_all_KEF()
            if exodus in Bones:
                game = await bot.send_dice(chat_id=channal_id, emoji='üé≤', reply_to_message_id=res.message_id)
                result_game = game.dice.value
                if exodus == '–ú–µ–Ω—å—à–µ' and result_game <= 3:
                    await transfer_wins(KEF=KEF.get('KEF1'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if exodus == '–ú–µ–Ω—å—à–µ' and result_game > 3:
                    await referal_send_money(user_id, amount)
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name, message_id=res.message_id)

                if exodus == '–ë–æ–ª—å—à–µ' and result_game >= 4:
                    await transfer_wins(KEF=KEF.get('KEF1'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return

                if exodus == '–ë–æ–ª—å—à–µ' and result_game < 4:
                    await referal_send_money(user_id, amount)
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name, message_id=res.message_id)

                if exodus == '1' and result_game == 1 or exodus == '2' and result_game == 2 or exodus == '3' and result_game == 3 or exodus == '4' and result_game == 4 or exodus == '5' and result_game == 5 or exodus == '6' and result_game == 6:
                    await transfer_wins(KEF=KEF.get('KEF2'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return

                if exodus == '1' and result_game != 1 or exodus == '2' and result_game != 2 or exodus == '3' and result_game != 3 or exodus == '4' and result_game != 4 or exodus == '5' and result_game != 5 or exodus == '6' and result_game != 6:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

                if exodus == '–ü–≤–ø' or exodus == '–î—É—ç–ª—å':
                    game_bot = await bot.send_dice(chat_id=channal_id, emoji='üé≤', reply_to_message_id=res.message_id)
                    result_user = game.dice.value
                    result_bot = game_bot.dice.value
                    if result_user == result_bot:
                        await draw_message(message_id=res.message_id, username=username, user_id=user_id,
                                           amount=amount, order=order)

                        return
                    if result_user > result_bot:
                        await transfer_wins(KEF=KEF.get('KEF3'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return
                    if result_user < result_bot:
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)

                if exodus == '–ù–∏—á—å—è' or exodus == '–†–∞–≤–Ω–æ':
                    game_bot = await bot.send_dice(chat_id=channal_id, emoji='üé≤', reply_to_message_id=res.message_id)
                    result_user = game.dice.value
                    result_bot = game_bot.dice.value
                    if result_user == result_bot:
                        await transfer_wins(KEF=KEF.get('KEF14'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return
                    if result_user != result_bot:
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)

                if exodus == '2–ú' or exodus == '2 –ú–µ–Ω—å—à–µ':
                    game_bot = await bot.send_dice(chat_id=channal_id, emoji='üé≤',
                                                   reply_to_message_id=res.message_id)
                    result_user = game.dice.value
                    result_bot = game_bot.dice.value
                    if result_user <= 3 and result_bot <= 3:
                        await transfer_wins(KEF=KEF.get('KEF4'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return
                    else:
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)

                if exodus == '2–ë' or exodus == '2 –ë–æ–ª—å—à–µ':
                    game_bot = await bot.send_dice(chat_id=channal_id, emoji='üé≤',
                                                   reply_to_message_id=res.message_id)
                    result_user = game.dice.value
                    result_bot = game_bot.dice.value
                    if result_user >= 4 and result_bot >= 4:
                        await transfer_wins(KEF=KEF.get('KEF4'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return
                    else:
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)

                if exodus == '–ß–µ—Ç' and result_game % 2 == 0:
                    await transfer_wins(KEF=KEF.get('KEF5'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return

                if exodus == '–ß–µ—Ç' and result_game % 2 != 0:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

                if exodus == '–ù–µ—á–µ—Ç' and result_game % 2 != 0:
                    await transfer_wins(KEF=KEF.get('KEF5'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return

                if exodus == '–ù–µ—á–µ—Ç' and result_game % 2 == 0:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

            if exodus in Slots:
                game = await bot.send_dice(chat_id=channal_id, emoji='üé∞', reply_to_message_id=res.message_id)
                result_game = game.dice.value
                if result_game == 43:
                    await transfer_wins(KEF=KEF.get('KEF6'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if result_game == 1:
                    await transfer_wins(KEF=KEF.get('KEF7'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if result_game == 22:
                    await transfer_wins(KEF=KEF.get('KEF8'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if result_game == 64:
                    await transfer_wins(KEF=KEF.get('KEF9'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                else:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

            if exodus in Basketball:
                game = await bot.send_dice(chat_id=channal_id, emoji='üèÄ', reply_to_message_id=res.message_id)
                result_game = game.dice.value
                if exodus == '–ë–∞—Å–∫–µ—Ç–±–æ–ª –ì–æ–ª' and result_game >= 4 or exodus == '–ë–∞—Å–∫–µ—Ç –ì–æ–ª' and result_game >= 4:
                    await transfer_wins(KEF=KEF.get('KEF10'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if exodus == '–ë–∞—Å–∫–µ—Ç–±–æ–ª –ì–æ–ª' and result_game < 4 or exodus == '–ë–∞—Å–∫–µ—Ç –ì–æ–ª' and result_game < 4:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

                if exodus == '–ë–∞—Å–∫–µ—Ç–±–æ–ª –ú–∏–º–æ' and result_game <= 3 or exodus == '–ë–∞—Å–∫–µ—Ç –ú–∏–º–æ' and result_game <= 3:
                    await transfer_wins(KEF=KEF.get('KEF11'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if exodus == '–ë–∞—Å–∫–µ—Ç–±–æ–ª –ú–∏–º–æ' and result_game > 3 or exodus == '–ë–∞—Å–∫–µ—Ç –ú–∏–º–æ' and result_game > 3:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

            if exodus in Fotbool:
                game = await bot.send_dice(chat_id=channal_id, emoji='‚öΩÔ∏è', reply_to_message_id=res.message_id)
                result_game = game.dice.value
                if exodus == '–§—É—Ç–±–æ–ª –ì–æ–ª' and result_game >= 3 or exodus == '–§—É—Ç –ì–æ–ª' and result_game >= 3:
                    await transfer_wins(KEF=KEF.get('KEF12'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if exodus == '–§—É—Ç–±–æ–ª –ì–æ–ª' and result_game < 3 or exodus == '–§—É—Ç –ì–æ–ª' and result_game < 3:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

                if exodus == '–§—É—Ç–±–æ–ª –ú–∏–º–æ' and result_game <= 2 or exodus == '–§—É—Ç –ú–∏–º–æ' and result_game <= 2:
                    await transfer_wins(KEF=KEF.get('KEF13'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)
                    return
                if exodus == '–§—É—Ç–±–æ–ª –ú–∏–º–æ' and result_game > 2 or exodus == '–§—É—Ç –ú–∏–º–æ' and result_game > 2:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)
            if exodus in SU_E_FA:
                SU_E_FA_Procent = db.get_KNB_procent()
                if exodus == '–ù–æ–∂–Ω–∏—Ü—ã':
                    await bot.send_message(chat_id=channal_id, text='‚úåÔ∏è', reply_to_message_id=res.message_id)  # User
                    number = random.randint(1, 101)
                    emoji_bot = random.choice(['‚úåÔ∏è', '‚úã', '‚úä'])
                    if number >= SU_E_FA_Procent:
                        emoji_bot = '‚úä'
                    await bot.send_message(chat_id=channal_id, text=emoji_bot, reply_to_message_id=res.message_id)
                    # –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ–±–µ–¥ –∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
                    if emoji_bot == '‚úä':
                        await asyncio.sleep(3.5)
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)
                    if emoji_bot == '‚úåÔ∏è':
                        return await draw_message(message_id=res.message_id, username=username, user_id=user_id,
                                           amount=amount, order=order)
                    if emoji_bot == '‚úã':
                        await transfer_wins(KEF=KEF.get('KEF15'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return

                if exodus == '–ö–∞–º–µ–Ω—å':
                    await bot.send_message(chat_id=channal_id, text='‚úä', reply_to_message_id=res.message_id)  # User
                    number = random.randint(1, 101)
                    emoji_bot = random.choice(['‚úåÔ∏è', '‚úã', '‚úä'])
                    if number >= SU_E_FA_Procent:
                        emoji_bot = '‚úã'
                    await bot.send_message(chat_id=channal_id, text=emoji_bot, reply_to_message_id=res.message_id)
                    # –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ–±–µ–¥ –∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
                    if emoji_bot == '‚úã':
                        await asyncio.sleep(3.5)
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)
                    if emoji_bot == '‚úä':
                        return await draw_message(message_id=res.message_id, username=username, user_id=user_id,
                                           amount=amount, order=order)
                    if emoji_bot == '‚úåÔ∏è':
                        await transfer_wins(KEF=KEF.get('KEF15'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return

                if exodus == '–ë—É–º–∞–≥–∞':
                    await bot.send_message(chat_id=channal_id, text='‚úã', reply_to_message_id=res.message_id)  # User
                    number = random.randint(1, 101)
                    emoji_bot = random.choice(['‚úåÔ∏è', '‚úã', '‚úä'])
                    if number >= SU_E_FA_Procent:
                        emoji_bot = '‚úåÔ∏è'
                    await bot.send_message(chat_id=channal_id, text=emoji_bot, reply_to_message_id=res.message_id)
                    # –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ–±–µ–¥ –∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
                    if emoji_bot == '‚úåÔ∏è':
                        await asyncio.sleep(3.5)
                        await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                          message_id=res.message_id)
                        await referal_send_money(user_id, amount)
                    if emoji_bot == '‚úã':
                        return await draw_message(message_id=res.message_id, username=username, user_id=user_id,
                                           amount=amount, order=order)
                    if emoji_bot == '‚úä':
                        await transfer_wins(KEF=KEF.get('KEF15'), username=username, amount=amount, user_id=user_id,
                                            message_id=res.message_id,
                                            rubs_price=rubs_price, order=order)
                        return
            if exodus in WHEEL:

                number_random = random.randint(0, 14)
                if number_random == 0 and exodus == '–ó–µ–ª–µ–Ω–æ–µ':
                    number_random = random.randint(0, 14)
                await bot.send_animation(chat_id=channal_id, animation=FSInputFile(f'video/{number_random}.mp4'))

                if exodus == '–ö—Ä–∞—Å–Ω–æ–µ' and str(number_random) in RED:
                    return await transfer_wins(KEF=KEF.get('KEF16'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)

                if exodus == '–ö—Ä–∞—Å–Ω–æ–µ' and str(
                        number_random) in BLACK or number_random == 0 and exodus == '–ö—Ä–∞—Å–Ω–æ–µ':
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

                if exodus == '–ß–µ—Ä–Ω–æ–µ' and str(number_random) in BLACK:
                    return await transfer_wins(KEF=KEF.get('KEF16'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)

                if exodus == '–ß–µ—Ä–Ω–æ–µ' and str(number_random) in RED or number_random == 0 and exodus == '–ß–µ—Ä–Ω–æ–µ':
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

                if exodus == '–ó–µ–ª–µ–Ω–æ–µ' and number_random == 0:
                    return await transfer_wins(KEF=KEF.get('KEF17'), username=username, amount=amount, user_id=user_id,
                                        message_id=res.message_id,
                                        rubs_price=rubs_price, order=order)

                if exodus == '–ó–µ–ª–µ–Ω–æ–µ' and number_random != 0:
                    await go_cashback(amount=amount, user_id=user_id, first_name=first_name,
                                      message_id=res.message_id)
                    await referal_send_money(user_id, amount)

            db.add_count_pay(user_id=user_id, text='lose', amount=round(float(amount), 2))
            db.add_count_pay_stats_day(text='lose', amount=round(float(amount), 2))
            await send_message_lose_users(message_id=res.message_id)
            await asyncio.sleep(5)





async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await set_default_commands()
    dp.update.outer_middleware(LoggingUsers())
    dp.include_router(admin)
    await scheduler_jobs()
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())