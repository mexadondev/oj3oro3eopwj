import datetime
import random

from aiogram.filters import BaseFilter
from aiogram.types import BotCommand, BotCommandScopeDefault, Message, FSInputFile
from aiogram.utils.markdown import hlink

from loader import bot, crypto, db, scheduler
from string import digits

import asyncio

import pytz
from aiocryptopay.exceptions import CodeErrorFactory
from aiogram import types
from config import *
from keybords import *

async def set_default_commands():
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ], scope=BotCommandScopeDefault())



async def scheduler_jobs():
    scheduler.add_job(del_order_day, "cron", day='*', hour=0, minute=0) #–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
    scheduler.add_job(fake_game_adm, 'interval', seconds=TIMER)
    scheduler.add_job(warning_check_day, "cron", day='*', hour=23, minute=55) #–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —á–µ–∫–∏

    # scheduler.add_job(del_order_month, "cron", month='*', day='last', minute=59) #–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ–¥–µ–ª–∏
    # scheduler.add_job(del_order_week, 'cron', month='*', week='*', day=1) #–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é 1 –¥–Ω—è

async def del_order_day(): #–û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç—É –∑–∞ –¥–µ–Ω—å –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —á–µ–∫–∏ –∑–∞ –¥–µ–Ω—å
    db.del_stats_day()
    print('–û–±–Ω–æ–≤–∏–ª –¥–µ–Ω—å')
    all_cheks = await crypto.get_checks(asset='USDT', status='active')
    if all_cheks is None:
        return await bot.send_message(chat_id=channal_id, text="<b>‚åõÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏ —É–¥–∞–ª–µ–Ω—ã</b>")

    for i in all_cheks:
        try:
            await crypto.delete_check(i.check_id)
        except Exception:
            continue
    await bot.send_message(chat_id=channal_id, text="<b>‚åõÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏ —É–¥–∞–ª–µ–Ω—ã</b>")

async def warning_check_day():
    await bot.send_message(chat_id=channal_id, text='<b>‚è≥ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–æ–≤</b>')







async def get_transfer_channal():
    info = await crypto.get_transfers(asset='USDT', count=1)
    date = info[0].completed_at
    user_id = info[0].user_id
    amount = info[0].amount
    transfer_id = info[0].transfer_id
    date = date.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
    user = str(user_id)[5:]
    return await bot.send_message(chat_id=ID_SEND_TRANSFER, text='üí∏ <b>–í—ã–ø–ª–∞—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:</b>\n'
                                                          f'<b>‚î†User_id:</b> <code>*****{user}</code>\n'
                                                          f'<b>‚î†–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞:</b> <code>{transfer_id}</code>\n'
                                                          f'<b>‚î†–î–∞—Ç–∞:</b> <code>{date}</code>\n'
                                                          f'<b>‚îñ–°—É–º–º–∞:</b> <code>{round(float(amount), 2)}$</code>', reply_markup=send_okey())


async def send_message_win_users(usdt, result_win_amount, message_id, url, status=None):
    photo = FSInputFile('photos/Wins.jpg')
    if status != 'CHECK':
        return await bot.send_photo(chat_id=channal_id, photo=photo,
                                    caption=f'<b><blockquote>üü¢ –ü–æ–±–µ–¥–∞! \n\n'
                                            f'üí∏ –í—ã–∏–≥—Ä—ã—à: {round(float(usdt), 2)}$ ({result_win_amount}‚ÇΩ)\n'
                                            f'üïä –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot\n'
                                            f'‚ôªÔ∏è –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–∞—Ö!</blockquote></b>',
                                    reply_to_message_id=message_id, reply_markup=send_stavka())
    else:
        return await bot.send_photo(chat_id=channal_id, photo=photo,
                                    caption=f'<b><blockquote>üü¢ –ü–æ–±–µ–¥–∞! \n\n'
                                            f'üí∏ –í—ã–∏–≥—Ä—ã—à: {round(float(usdt), 2)}$ ({result_win_amount}‚ÇΩ)\n'
                                            f'üïä –ó–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n'
                                            f'‚ôªÔ∏è –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–∞—Ö!</blockquote></b>',
                                    reply_to_message_id=message_id, reply_markup=kb_send_chek(url=url))



async def fake_send_message_win_users(amount, KEF, rubs_price, message_id):
    usdt = float(amount) * KEF

    rub = float(rubs_price) * float(usdt)
    result_win_amount = round(float(rub), 2)
    await asyncio.sleep(5)
    fake_users = "".join(random.choice(digits) for _ in range(0, 5))
    fake_transfer = "".join(random.choice(digits) for _ in range(0, 6))
    date = datetime.datetime.now(pytz.timezone('Europe/France')).strftime('%Y-%m-%d %H:%M:%S')

    photo = FSInputFile('photos/Wins.jpg')
    await bot.send_photo(chat_id=channal_id, photo=photo,
                         caption=f'<b><blockquote>üîµ –ü–æ–±–µ–¥–∞! \n\n'
                                 f'üí∏ –í—ã–∏–≥—Ä—ã—à: {round(float(usdt), 2)}$ ({result_win_amount}‚ÇΩ)\n'
                                 f'üïä –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot\n'
                                 f'üíô –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–∞—Ö!</blockquote></b>',
                         reply_to_message_id=message_id, reply_markup=send_stavka())

    return await bot.send_message(chat_id=ID_SEND_TRANSFER, text='üí∏ <b>–í—ã–ø–ª–∞—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:</b>\n'
                                                                 f'<b>‚î†User_id:</b> <code>*****{fake_users}</code>\n'
                                                                 f'<b>‚î†–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞:</b> <code>{fake_transfer}</code>\n'
                                                                 f'<b>‚î†–î–∞—Ç–∞:</b> <code>{date}</code>\n'
                                                                 f'<b>‚îñ–°—É–º–º–∞:</b> <code>{round(float(amount), 2)}$</code>',
                                  reply_markup=send_okey())

async def send_message_lose_users(message_id):

    await asyncio.sleep(5)
    photo = FSInputFile('photos/Lose.jpg')
    await bot.send_photo(chat_id=channal_id, photo=photo,
                         caption=f'<b>ü•µ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!\n\n'
                                 f'<blockquote>–ü–æ–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É —Å–Ω–æ–≤–∞!\n'
                                 f'–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö!</blockquote></b>',
                         reply_to_message_id=message_id, reply_markup=send_stavka())

async def fake_send_message_lose_users(message_id, name, stavka):
    cashback_amount = float(stavka) / 100 * CASHBACK_PROCENT

    await asyncio.sleep(5)
    photo = FSInputFile('photos/Lose.jpg')
    await bot.send_photo(chat_id=channal_id, photo=photo,
                         caption=f'<b>ü•µ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!\n\n'
                                 f'<blockquote>–ü–æ–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É —Å–Ω–æ–≤–∞!\n'
                                 f'–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö!</blockquote></b>',
                         reply_to_message_id=message_id, reply_markup=send_stavka())
    if float(stavka) > CASHBACK_LIMIT:
        res = await bot.send_message(chat_id=channal_id,
                               text=f'üí∏ <b>{name} –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∫—ç—à–±—ç–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {round(float(cashback_amount), 1)}$ –æ—Ç  –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ {float(stavka)}$ [{CASHBACK_PROCENT}%]</b>',
                               reply_to_message_id=message_id,
                               reply_markup=get_fake_cashback(amount=round(float(cashback_amount), 1), status=0))
        await asyncio.sleep(random.randint(4, 9))
        await bot.edit_message_reply_markup(chat_id=channal_id, message_id=res.message_id, reply_markup=get_fake_cashback(amount=round(float(cashback_amount), 1), status=1))


async def send_message_exeption(e, username, user_id, message_win, amount):
    for i in ADMIN:
        await bot.send_message(chat_id=i,
                               text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (<code>{user_id}</code>)')
    await bot.send_message(chat_id=channal_id,
                           text=f'‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}$ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤ —Ä—É—á–Ω—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME} –¥–ª—è –≤—ã–¥–∞—á–∏ —á–µ–∫–∞</b>',
                           reply_to_message_id=message_win)

async def send_message_exeption_comments(e, username, user_id, message_win, amount):
    for i in ADMIN:
        await bot.send_message(chat_id=i,
                               text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (<code>{user_id}</code>) –Ω–∞ —Å—É–º–º—É: {amount}')
    await bot.send_message(chat_id=channal_id,
                           text=f'‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [–ù–∞–¥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ], –Ω–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME} –¥–ª—è –≤—ã–¥–∞—á–∏ —á–µ–∫–∞</b>',
                           reply_to_message_id=message_win)






async def referal_send_money(user, amount):
    refere = db.select_referi(user)
    order = ''.join(random.choice(digits) for i in range(10))
    if refere != None and float(amount) >= min_stavka_referal:
        amount_lose_ref = float(amount) / 100 * lose_withdraw
        if float(amount_lose_ref) > 1:
            try:
                await crypto.transfer(user_id=refere, asset='USDT', amount=float(amount_lose_ref), spend_id=order)
                db.add_balances_ref(refere, amount_lose_ref)
                await bot.send_message(chat_id=refere, text=f'<b>üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount_lose_ref}$ [–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞]</b>')


            except CodeErrorFactory as e:
                for i in ADMIN:
                    await bot.send_message(chat_id=i, text=f'<code>{refere}</code> –Ω–µ –ø–æ–ª—É—á–∏–ª –∫—ç—à–±—ç–∫ {float(amount_lose_ref)}$\n\n'
                                                           f'–û—à–∏–±–∫–∞: {e}')

            return
        else:
            chek = await crypto.create_check(asset='USDT', amount=amount, pin_to_user_id=user)
            db.add_balances_ref(refere, amount_lose_ref)
            await bot.send_message(chat_id=refere,
                                   text=f'<b>üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount_lose_ref}$ [–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞]</b>')
            try:
                await bot.send_message(chat_id=refere, text=f'<b>üéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫ [–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞]\n\n'
                                                             f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ 00:00 –ø–æ –ú–°–ö\n\n'
                                                            f'–ß–µ–∫: {chek.bot_check_url}</b>')
            except Exception:
                pass


async def go_cashback(amount, user_id, message_id, first_name):
    if float(amount) >= CASHBACK_LIMIT:
        await asyncio.sleep(5)
        return await Cashback_send(user=user_id, stavka=amount, message_id=message_id,
                                   name=first_name)



async def Cashback_send(user, name, message_id, stavka):
    cashback_amount = float(stavka) / 100 * CASHBACK_PROCENT
    if float(cashback_amount) > 1:
        await bot.send_message(chat_id=channal_id, text=f'üí∏ <b>{name} –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∫—ç—à–±—ç–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {round(float(cashback_amount), 1)}$ –æ—Ç  –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ {float(stavka)}$ [{CASHBACK_PROCENT}%]</b>', reply_to_message_id=message_id, reply_markup=get_cashback(user, round(float(cashback_amount), 1)))
    else:
        chek = await crypto.create_check(asset='USDT', amount=cashback_amount, pin_to_user_id=user)
        res = await bot.send_message(chat_id=channal_id,
                               text=f'üí∏ <b>{name} –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∫—ç—à–±—ç–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {round(float(cashback_amount), 1)}$ –æ—Ç  –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ {float(stavka)}$ [{CASHBACK_PROCENT}%]</b>',
                               reply_to_message_id=message_id, reply_markup=get_cashback_check(url=chek.bot_check_url,
                                                                                               amount=round(float(
                                                                                                   cashback_amount),
                                                                                                            2)))
        try:
            await bot.send_message(chat_id=user, text=f'<b>üéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫\n\n'
                                                         f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ 00:00 –ø–æ –ú–°–ö</b>',
                                   reply_markup=kb_viev_post(url=res.get_url(), amount=cashback_amount))
        except Exception:
            pass



async def transfer_wins(KEF, user_id, message_id, username, amount, rubs_price, order):
    usdt = float(amount) * KEF
    res_win_db = float(usdt) - float(amount)

    rub = float(rubs_price) * float(usdt)
    result_win_amount = round(float(rub), 2)
    await asyncio.sleep(5)



    db.add_count_pay(user_id=user_id, text='win', amount=round(float(res_win_db), 2))
    db.add_count_pay_stats_day(text='win', amount=round(float(res_win_db), 2))

    if float(amount) > 1:
        message_win = await send_message_win_users(usdt=usdt, result_win_amount=result_win_amount,
                                                   message_id=message_id, url='')
        try:
            await crypto.transfer(user_id=user_id, asset='USDT', amount=round(float(usdt), 2), spend_id=order)
            await get_transfer_channal()
        except CodeErrorFactory as e:
            await send_message_exeption(e=e, username=username, user_id=user_id,
                                        message_win=message_win.message_id, amount=round(float(usdt), 2))
    else:
        try:
            chek = await crypto.create_check(asset='USDT', amount=round(float(usdt), 2), pin_to_user_id=user_id)
            message_win = await send_message_win_users(usdt=usdt, result_win_amount=result_win_amount,
                                                       message_id=message_id, status='CHECK', url=chek.bot_check_url)
        except CodeErrorFactory as e:
            return await send_message_exeption(e=e, username=username, user_id=user_id,
                                        message_win=message_id, amount=round(float(usdt), 2))

        try:
            await bot.send_message(chat_id=user_id, text=f'<b>üéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫\n\n'
                                                         f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ 00:00 –ø–æ –ú–°–ö</b>',
                                   reply_markup=kb_viev_post(url=message_win.get_url(), amount=round(float(usdt), 2)))
        except Exception:
            pass


async def draw_message(message_id, amount, order, user_id, username):
    await asyncio.sleep(3.5)
    amount = float(amount) - (float(amount) / 100 * PROCENT_DRAW)
    if float(amount) > 1:
        res_vozvrat = await bot.send_message(chat_id=channal_id, text='<b>üè≥Ô∏è –ù–∏—á—å—è!\n\n'
                                                                      f'üïä –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ CryptoBot —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_DRAW}%</b>',
                                             reply_to_message_id=message_id, reply_markup=send_stavka())
        try:
            await crypto.transfer(user_id=user_id, asset='USDT', amount=float(amount), spend_id=order)
        except CodeErrorFactory as e:
            await send_message_exeption(e=e, username=username, user_id=user_id,
                                        message_win=res_vozvrat.message_id, amount=round(float(amount), 2))
    else:
        try:
            chek = await crypto.create_check(asset='USDT', amount=amount, pin_to_user_id=user_id)
            res = await bot.send_message(chat_id=channal_id,
                                         text=f'<b>üè≥Ô∏è –ù–∏—á—å—è!\n\n'
                                              f'–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à —á–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏ —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_DRAW}%</b>',
                                         reply_markup=kb_send_chek(chek.bot_check_url))
        except CodeErrorFactory as e:
            return await send_message_exeption(e=e, username=username, user_id=user_id,
                                        message_win=message_id, amount=round(float(amount), 2))
        try:
            await bot.send_message(chat_id=user_id, text=f'<b>üéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫\n\n'
                                                         f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ 00:00 –ø–æ –ú–°–ö</b>',
                                   reply_markup=kb_viev_post(url=res.get_url(), amount=amount))
        except Exception:
            pass


async def get_name_game(text:str):
    game_dict = {
        '–ë–æ–ª—å—à–µ': 'üé≤ –ë–æ–ª—å—à–µ|–ú–µ–Ω—å—à–µ',
        '–ú–µ–Ω—å—à–µ': 'üé≤ –ë–æ–ª—å—à–µ|–ú–µ–Ω—å—à–µ',
        '1': 'üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        '2': 'üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        '3': 'üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        '4': 'üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        '5': 'üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        '6': 'üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        '–ü–≤–ø': 'üé≤ –î—É—ç–ª—å',
        '–î—É—ç–ª—å': 'üé≤ –î—É—ç–ª—å',
        '2–ú': 'üé≤ –î–≤–æ–π–Ω–æ–π –∫—É–±',
        '2–ë': 'üé≤ –î–≤–æ–π–Ω–æ–π –∫—É–±',
        '2 –ë–æ–ª—å—à–µ': 'üé≤ –î–≤–æ–π–Ω–æ–π –∫—É–±',
        '2 –ú–µ–Ω—å—à–µ': 'üé≤ –î–≤–æ–π–Ω–æ–π –∫—É–±',
        '–†–∞–≤–Ω–æ': 'üé≤ –ë–ª–∏–∑–Ω–µ—Ü—ã',
        '–ù–∏—á—å—è': 'üé≤ –ë–ª–∏–∑–Ω–µ—Ü—ã',
        '–ß–µ—Ç': 'üé≤ –ß–µ—Ç | –ù–µ—á–µ—Ç (–∫—É–±)',
        '–ù–µ—á–µ—Ç': 'üé≤ –ß–µ—Ç | –ù–µ—á–µ—Ç (–∫—É–±)',
        '–ë–∞—Å–∫–µ—Ç–±–æ–ª –ì–æ–ª': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
        '–ë–∞—Å–∫–µ—Ç –ì–æ–ª': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
        '–ë–∞—Å–∫–µ—Ç–±–æ–ª –ú–∏–º–æ': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
        '–ë–∞—Å–∫–µ—Ç –ú–∏–º–æ': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
        '–§—É—Ç–±–æ–ª –ì–æ–ª': '‚öΩÔ∏è –§—É—Ç–±–æ–ª',
        '–§—É—Ç –ì–æ–ª': '‚öΩÔ∏è –§—É—Ç–±–æ–ª',
        '–§—É—Ç–±–æ–ª –ú–∏–º–æ': '‚öΩÔ∏è –§—É—Ç–±–æ–ª',
        '–§—É—Ç –ú–∏–º–æ': '‚öΩÔ∏è –§—É—Ç–±–æ–ª',
        '–°–ª–æ—Ç—ã': 'üé∞ –°–ª–æ—Ç—ã',
        '–ö–∞–º–µ–Ω—å': 'ü™®‚úÇÔ∏èüìÑ–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞',
        '–ù–æ–∂–Ω–∏—Ü—ã': 'ü™®‚úÇÔ∏èüìÑ–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞',
        '–ë—É–º–∞–≥–∞': 'ü™®‚úÇÔ∏èüìÑ–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞',
        '–ó–µ–ª–µ–Ω–æ–µ': 'üé° –ö–æ–ª–µ—Å–æ',
        '–ß–µ—Ä–Ω–æ–µ': 'üé° –ö–æ–ª–µ—Å–æ',
        '–ö—Ä–∞—Å–Ω–æ–µ': 'üé° –ö–æ–ª–µ—Å–æ',
    }
    return game_dict.get(text, '‚ùì')


class IsAdmin(BaseFilter):
    async def __call__(self, message:Message):
        if message.from_user.id in ADMIN:
            return True
        return False



async def fake_game_adm():
    values_fake = db.get_fake_values()
    if values_fake:
        urls = db.get_URL()
        help_stavka = hlink('–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', urls.get('info_stavka'))
        info_channal = hlink('–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª', urls.get('news'))
        url_viplata = hlink('–í—ã–ø–ª–∞—Ç—ã', urls.get('transfer'))
        url_referal_programm = hlink(f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ [{lose_withdraw}%]', URL_BOT)
        text_game = random.choice(["–ë–æ–ª—å—à–µ", "–ú–µ–Ω—å—à–µ", "–ß–µ—Ç", "–ù–µ—á–µ—Ç"])
        amount = random.uniform(a=DIAPAZONE_AMOUNT[0], b=DIAPAZONE_AMOUNT[1])
        name = random.choice(FAKE_NICKNAME)
        res = await bot.send_message(chat_id=channal_id, text=f'''
ü§µüèª‚Äç‚ôÇÔ∏è –ö—Ä—É–ø—å–µ –ø—Ä–∏–Ω—è–ª –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É.
<blockquote>üë§ –ò–≥—Ä–æ–∫: {name}
üí∏ –°—Ç–∞–≤–∫–∞: {round(float(amount), 1)}$
‚òÅÔ∏è –ò—Å—Ö–æ–¥: {text_game}
üïπ –ò–≥—Ä–∞: ({await get_name_game(text_game)})</blockquote>
<b>{help_stavka} | {info_channal} | {url_viplata}
[ {url_referal_programm} ]</b>''',
                                     reply_markup=send_stavka(), disable_web_page_preview=True)

        game = await bot.send_dice(chat_id=channal_id, emoji='üé≤', reply_to_message_id=res.message_id)
        result_game = game.dice.value

        echange = await crypto.get_exchange_rates()
        rubs_price = echange[0].rate

        if text_game == '–ú–µ–Ω—å—à–µ' and result_game <= 3:
            return await fake_send_message_win_users(amount=round(float(amount), 1), KEF=db.get_cur_KEF('KEF1'),
                                                     message_id=res.message_id, rubs_price=rubs_price)

        if text_game == '–ë–æ–ª—å—à–µ' and result_game >= 4:
            return await fake_send_message_win_users(amount=round(float(amount), 1), KEF=db.get_cur_KEF('KEF1'),
                                                     message_id=res.message_id,
                                                     rubs_price=rubs_price)

        if text_game == "–ß–µ—Ç" and result_game % 2 == 0:
            return await fake_send_message_win_users(amount=round(float(amount), 1), KEF=db.get_cur_KEF('KEF5'),
                                                     message_id=res.message_id, rubs_price=rubs_price)

        if text_game == "–ù–µ—á–µ—Ç" and result_game % 2 != 0:
            return await fake_send_message_win_users(amount=round(float(amount), 1), KEF=db.get_cur_KEF('KEF5'),
                                                     message_id=res.message_id, rubs_price=rubs_price)

        else:
            return await fake_send_message_lose_users(message_id=res.message_id, name=name, stavka=round(float(amount), 1))



async def kef_all_text(all_kef):
    text = f'''üìä –¢–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:
    
<b>‚î†1)–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ –∫–æ—Å—Ç–∏: <code>{all_kef["KEF1"]}</code>x
‚î†2)–ö—É–±–∏–∫ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ: <code>{all_kef["KEF2"]}</code>x
‚î†3)–ü–í–ü –î—É—ç–ª—å –∫—É–±–∏–∫: <code>{all_kef["KEF3"]}</code>x
‚î†4)–î–≤–∞ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ –∫—É–±–∏–∫: <code>{all_kef["KEF4"]}</code>x
‚î†5)–ß–µ—Ç/–ù–µ—á–µ—Ç –ö—É–±–∏–∫: <code>{all_kef["KEF5"]}</code>x
‚î†6)–°–ª–æ—Ç—ã 3 –ª–∏–º–æ–Ω–∞: <code>{all_kef["KEF6"]}</code>x
‚î†7)–°–ª–æ—Ç—ã BAR: <code>{all_kef["KEF7"]}</code>x
‚î†8)–°–ª–æ—Ç—ã 3 —è–≥–æ–¥—ã: <code>{all_kef["KEF8"]}</code>x
‚î†9)–°–ª–æ—Ç—ã 777: <code>{all_kef["KEF9"]}</code>x
‚î†10)–ë–∞—Å–∫–µ—Ç–±–æ–ª –ì–æ–ª: <code>{all_kef["KEF10"]}</code>x
‚î†11)–ë–∞—Å–∫–µ—Ç–±–æ–ª –º–∏–º–æ: <code>{all_kef["KEF11"]}</code>x
‚î†12)–§—É—Ç–±–æ–ª –≥–æ–ª: <code>{all_kef["KEF12"]}</code>x
‚î†13)–§—É—Ç–±–æ–ª –º–∏–º–æ: <code>{all_kef["KEF13"]}</code>x
‚î†14)–ù–∏—á—å—è –ø–≤–ø: <code>{all_kef["KEF14"]}</code>x
‚î†15)–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: <code>{all_kef["KEF15"]}</code>x
‚î†16)–ö–æ–ª–µ—Å–æ –∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ: <code>{all_kef["KEF16"]}</code>x
‚îñ17)–ö–æ–ª–µ—Å–æ –∑–µ–ª–µ–Ω–æ–µ: <code>{all_kef["KEF17"]}</code>x

‚öôÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>'''
    return text


async def procent_knb_twist(values):
    data = {1:10, 10:20, 20:30, 30:40, 40:50, 50:60, 60:70, 70:80, 80:90, 90:100, 100:1}
    return data.get(values)


async def urls_admin_text(url):
    text = f"""<b>üìé–ö–∞–Ω–∞–ª: {url.get('channals')}
üìé–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã: {url.get('checks')}
üìé–ü—Ä–∞–≤–∏–ª–∞: {url.get('rules')}
üìé–í—ã–ø–ª–∞—Ç—ã: {url.get('transfer')}
üìé–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {url.get('command_game')}
üìé–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É: {url.get('info_stavka')}
üìé–ù–æ–≤–æ—Å—Ç–∏: {url.get('news')}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</b>"""
    return text


async def not_game_func(amount:float, user_id, status:str, first_name, order, username): #–í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫–æ–º —é–∑–µ—Ä—É –æ–±—Ä–∞—Ç–Ω–æ
    kommision = float(amount) * PROCENT_NOT_GAME / 100
    amount = float(amount) - kommision

    if float(amount) < 1 and status == 'Comments':
        chek = await crypto.create_check(asset='USDT', amount=amount, pin_to_user_id=user_id)
        res = await bot.send_message(chat_id=channal_id, text=f'<b>‚ö†Ô∏è {first_name} –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!\n\n'
                                                        f'–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à —á–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏ —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_NOT_GAME}%</b>', reply_markup=kb_send_chek(chek.bot_check_url))
        try:
            await bot.send_message(chat_id=user_id, text=f'<b>üéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫\n\n'
                                                         f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ 00:00 –ø–æ –ú–°–ö</b>', reply_markup=kb_viev_post(url=res.get_url(), amount=amount))
        except Exception:
            pass

    if float(amount) >= 1 and status == 'Comments':
        res = await bot.send_message(chat_id=channal_id,
                                     text=f'<b>‚ö†Ô∏è {first_name} –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!\n\n'
                                          f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_NOT_GAME}%</b>',
                                     reply_markup=send_stavka())
        try:
            return await crypto.transfer(user_id=user_id, asset='USDT', amount=float(amount), spend_id=order)
        except CodeErrorFactory as e:
            return await send_message_exeption_comments(e=e, username=username, user_id=user_id,
                                                        message_win=res.message_id, amount=amount)


    if status == 'LIMIT':
        res = await bot.send_message(chat_id=channal_id,
                                     text=f'<b>‚ö†Ô∏è {first_name} –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏ –≤\n\n'
                                          f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_NOT_GAME}%</b>',
                                     reply_markup=send_stavka())
        try:
            return await crypto.transfer(user_id=user_id, asset='USDT', amount=float(amount), spend_id=order)
        except CodeErrorFactory as e:
            return await send_message_exeption_comments(e=e, username=username, user_id=user_id,
                                                        message_win=res.message_id, amount=amount)



    if float(amount) < 1 and status == 'Command':
        chek = await crypto.create_check(asset='USDT', amount=amount, pin_to_user_id=user_id)
        res = await bot.send_message(chat_id=channal_id, text='‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!\n'
                                          '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤–µ—Ä–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n\n'
                                          f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_NOT_GAME}%</b>', reply_markup=kb_send_chek(chek.bot_check_url))
        try:
            await bot.send_message(chat_id=user_id, text=f'<b>üéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫\n\n'
                                                         f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ 00:00 –ø–æ –ú–°–ö</b>', reply_markup=kb_viev_post(url=res.get_url(), amount=amount))
        except Exception:
            pass

    if float(amount) >= 1 and status == 'Command':
        res = await bot.send_message(chat_id=channal_id,
                                     text='‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!\n'
                                          '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤–µ—Ä–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n\n'
                                          f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ CryptoBot —Å –∫–æ–º–∏—Å—Å–∏–µ–π {PROCENT_NOT_GAME}%</b>',
                                     reply_markup=send_stavka())
        try:
            return await crypto.transfer(user_id=user_id, asset='USDT', amount=float(amount), spend_id=order)
        except CodeErrorFactory as e:
            return await send_message_exeption_comments(e=e, username=username, user_id=user_id,
                                                        message_win=res.message_id, amount=amount)









